name: Build Windows Executable
on:
  release:
    types: [created]
  workflow_dispatch:  # Manual trigger for testing

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if ("${{ github.event_name }}" -eq "release") {
            $version = "${{ github.event.release.tag_name }}" -replace '^v', ''
            echo "version=$version" >> $env:GITHUB_OUTPUT
            echo "is_release=true" >> $env:GITHUB_OUTPUT
          } else {
            $version = "dev-$(Get-Date -Format 'yyyyMMdd-HHmm')"
            echo "version=$version" >> $env:GITHUB_OUTPUT
            echo "is_release=false" >> $env:GITHUB_OUTPUT
          }
          echo "Using version: $version"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install Dependencies
        run: uv sync --locked --all-extras --dev
      
      - name: Install scilslab wheels
        run: uv add wheel\scilslab-8.1.122-cp313-cp313-win_amd64.whl

      - name: Build executable with PyInstaller
        run: |
          echo "=== Building executable ==="
          uv run pyinstaller feature_extractor_gui.spec --clean --noconfirm
          echo "=== Build completed ==="
        
      - name: Verify executable
        run: |
          if (Test-Path "dist\feature_extractor_gui\feature_extractor_gui.exe") {
            echo "✅ Executable created successfully"
            $fileInfo = Get-Item 'dist\feature_extractor_gui\feature_extractor_gui.exe'
            echo "File size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
          } else {
            echo "❌ Executable not found"
            exit 1
          }

      - name: Create portable ZIP
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $zipName = "PBP-Exporter-Windows-v$version.zip"
          Compress-Archive -Path "dist\feature_extractor_gui\*" -DestinationPath $zipName
          echo "✅ ZIP created: $zipName"
          echo "zip_name=$zipName" >> $env:GITHUB_OUTPUT

      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: PBP-Exporter-Windows-${{ steps.get_version.outputs.version }}
          path: PBP-Exporter-Windows-v${{ steps.get_version.outputs.version }}.zip
          retention-days: 90

      - name: Upload to Release
        if: steps.get_version.outputs.is_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: PBP-Exporter-Windows-v${{ steps.get_version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}